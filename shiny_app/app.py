from shiny import App, reactive, render, ui
import ollama
from pathlib import Path


# Modell ID
MODEL_ID = "llama3.1:8b-instruct-q4_0"
ollama.pull(MODEL_ID)

# Der feste Text, auf den sich die Fragen beziehen
text = """
2011 wurden in Deutschland 1.296.349 Euro fÃ¼r Forschung und Entwicklung in Architektur- und IngenieurbÃ¼ros sowie fÃ¼r technische Untersuchungen ausgegeben. 
1987 gab es im gesamten Wirtschaftssektor 295.332 VollzeitÃ¤quivalente (VZÃ„) im Bereich Forschung und Entwicklung. 
2016 wurden im Sektor der freiberuflichen, wissenschaftlichen und technischen Dienstleistungen 47.551 VZÃ„ gezÃ¤hlt. 
Im Bergbau und in der Steingewinnung wurden im selben Jahr 21.318 Tausend Euro fÃ¼r interne Forschungs- und Entwicklungsarbeiten ausgegeben. 
Im Maschinenbau wurden 2017 49.323 VZÃ„ im Bereich Forschung und Entwicklung verzeichnet. 
2004 betrugen die internen Forschungs- und Entwicklungsausgaben im gesamten Wirtschaftssektor 38.363.000 Tausend Euro.

2014 wurden in der Architektur und verwandten Bereichen 84.855 Tausend Euro fÃ¼r externe Forschungs- und Entwicklungsaufwendungen ausgegeben. 
2016 wurden im Luft- und Raumfahrzeugbau 1.732.000 Tausend Euro fÃ¼r interne Forschung und Entwicklung aufgewendet. 
In den Finanz- und Versicherungsdienstleistungen wurden 2014 318.000 Tausend Euro und 2010 in der Herstellung von Glas, Keramik sowie in der Verarbeitung von Steinen 285.334 Tausend Euro fÃ¼r interne Forschung und Entwicklung verzeichnet.

Was ist HEX?
Die AbkÃ¼rzung HEX steht fÃ¼r Higher Education Explorer. HEX ist eine Datenbank, in der die Daten aus Vorlesungsverzeichnissen von Hochschulen vereinheitlicht und zusammengefasst werden. Anhand dieses Datenpools lassen sich vielfÃ¤ltige Recherchen und Analysen durchfÃ¼hren und Entwicklungen rund um die Hochschullehre entdecken und aufzeigen. HEX wurde bisher als Beta-Version verÃ¶ffentlicht. HEX ist ein Projekt des Stifterverbandes und wird unterstÃ¼tzt von der Heinz Nixdorf Stiftung.

Welches Problem lÃ¶st HEX?
Der Higher Education Explorer schafft Transparenz Ã¼ber die Inhalte und Struktur der deutsche Hochschullehre sowie relevante Trends und VerÃ¤nderungen, indem er groÃŸe Datenmengen bis auf die Ebene des einzelnen Hochschulkurses durchsucht und auswertet. Bisher war dies nur auf Studiengangsebene mÃ¶glich. HEX ersetzt aufwÃ¤ndige AuszÃ¤hlungen einzelner Vorlesungsverzeichnisse.

Ist HEX ein Unikat oder gibt es vergleichbare Datenbasen und Werkzeuge?
FÃ¼r die Analyse von Veranstaltungen gibt es unseres Wissens kein vergleichbares Projekt. Zur Vereinfachung von Modulanrechnungen existiert das Projekt PIM und fÃ¼r Literaturverwendung Open Syllabus aus den USA.

FÃ¼r wen ist HEX wichtig?
HEX ist wichtig fÃ¼r die Beteiligten der Hochschulleitung, Hochschulentwicklung, und Hochschulforschung und die an diesen Themen interessierte FachÃ¶ffentlichkeit. Die UniversitÃ¤ten in der Datenbank erhalten individuelle Auswertungen, um schnell einen umfassenden Blick auf ihr Lehrangebot zu bekommen und datenbasierte Entscheidungen fÃ¼r Lehre und Studium treffen zu kÃ¶nnen. Mit dem HEX haben sie die MÃ¶glichkeit, die eigene Strategie zu prÃ¼fen, Standortvorteile zu erkennen und hervorzuheben oder frÃ¼hzeitig Entwicklungen in der Lehre anzustoÃŸen. Gleichzeitig werden Analysen Ã¼ber die allgemeine Entwicklung des Lehrangebots in Deutschland erstellt und fÃ¼r die Allgemeinheit zur VerfÃ¼gung gestellt.  

Auf welche Daten und welche Datenmengen greift HEX aktuell zu?
Auf welche kann er perspektivisch zugreifen? HEX ist eine kontinuierlich wachsende Datenbank, die momentan mehr als zwei Millionen Daten zu Lehrveranstaltungen sowie relevante Begleitdaten der Hochschulstatistik enthÃ¤lt. Die Daten stammen von 22 deutschen UniversitÃ¤ten, darunter 15 der grÃ¶ÃŸten UniversitÃ¤ten. Damit bildet der HEX das Studienangebot fÃ¼r rund 23 Prozent der Studierenden ab. Ob sich das Konzept auch auf HAWs/Fachhochschulen, private Hochschulen und/oder internationale Hochschulen Ã¼bertragen lÃ¤sst, wird in einer spÃ¤teren Phase geprÃ¼ft.

Welche Themen bzw. Fragen kann HEX untersuchen und in welcher Form prÃ¤sentiert er die Ergebnisse?
HEX bietet eine Vielzahl von AnalysemÃ¶glichkeiten, in denen die Grunddaten und Kennzahlen zu Kursen, Lehrformaten, Lehrsprachen, Studierende pro Kurs, wissenschaftliches Personal pro Kurs und Professorin bzw. Professor bis auf die Ebene der Studienbereiche miteinander verknÃ¼pft werden kÃ¶nnen. DarÃ¼ber hinaus entstehen im HEX-Forschungsprojekt inhaltliche Analysen zu Trends in Lehrthemen, Lehrprofile der Hochschule oder Future Skills. Die methodische Vielfalt reicht dabei von StichwortauszÃ¤hlungen bis zum maschinellen Lernen.

Wie lange wÃ¼rde eine HEX-Analyse dauern?
Einfache Veranstaltungsrecherchen lassen sich schnell umsetzen. Umfassende wissenschaftliche Analysen, bei denen auch andere Daten und Literatur einbezogen, die Limitationen so weit wie mÃ¶glich eingrenzt und die Ergebnisse eingeordnet werden, sind aufwÃ¤ndiger â€“ die genaue Dauer ist dabei individuell abzuschÃ¤tzen.  

Wer kann auf HEX zugreifen?
Der Stifterverband hat bereits mit Partnerstiftungen erste Analysen erarbeitet und wird sukzessive weitere Studienergebnisse verÃ¶ffentlichen. Wir mÃ¶chten gerne mit weiteren Partnern aus der Hochschul- und Wissenschaftsforschung zusammenarbeiten. Kommen Sie mit Studienideen gerne auf uns zu!

An wen kann ich mich wenden?
Schreiben Sie uns eine Mail an hex@stifterverband.de und wir gehen ins GesprÃ¤ch. 
"""

# System Prompt fÃ¼r das Modell
system_prompt = f"Du bist Settembrini, ein Deutsch sprechender AI Assistent der Nutzern Fragen Ã¼ber folgenden Inhalt beantwortet: \n{text}\n Antworte kurz und immer auf Deutsch. Benutze immer Emojis!. Kommentiere die Fragen, die Dir gestellt werden nicht."

# Shiny UI Layout
app_ui = ui.page_fluid(
    
    ui.include_css(Path(__file__).parent / "www" / "styles.css"),  # CSS-Datei einbinden
    ui.div(
        ui.output_ui("chat_output"),
        class_="chat-container"
    ),
    ui.div(
        ui.div(
            ui.input_text("user_question", "", placeholder="Sende eine Nachricht..."),
            ui.input_action_button("senden", ">", class_="send-button"),
            class_="input-row"
        ),
        class_="input-container"
    )
)


# Server-Logik
def server(input, output, session):
    
    # Initialisiere den Chatverlauf im Reactive-State
    chat_state = reactive.Value([
        {"role": "system", "content": system_prompt},
        {"role": "assistant", "content": "Hallo, mein Name ist Settembrini ðŸ˜Š. Ich bin der AI-Assistent des Datenportals des Stifterverbandes. Ich mÃ¶chte helfen!"}
    ])
    # Nachricht senden und Verlauf aktualisieren
    @reactive.Effect
    @reactive.event(input.senden)
    def send_message():
        if input.user_question().strip():
            # FÃ¼ge die Benutzerfrage zum Verlauf hinzu
            chat_state.set(chat_state.get() + [{"role": "user", "content": input.user_question()}])

            # Sende die Frage an das Modell und erhalte die Antwort
            messages = chat_state.get()
            response = ollama.chat(
                model=MODEL_ID, 
                messages=messages, 
                options={'temperature': 0.1, 'num_predict': 256, "top_p": 0.9}
            )

            # FÃ¼ge die Antwort des Modells zum Verlauf hinzu
            chat_state.set(chat_state.get() + [{"role": "assistant", "content": response['message']['content']}])

            # LÃ¶sche den Inhalt des Eingabefelds nach dem Senden der Nachricht
            ui.update_text("user_question", value="")

    
    # Den gesamten Verlauf formatieren und anzeigen
    @output
    @render.ui
    def chat_output():
        messages = chat_state.get()
        history_html = ""
        for message in messages:
            if message['role'] == 'user':
                history_html += f"""
                <div style='text-align: right; margin: 10px 0;'>
                    <span style='background-color: #b6ebae; padding: 10px; border-radius: 10px; display: inline-block; max-width: 80%;'>
                        {message['content']}
                    </span>
                </div>
                """
            elif message['role'] == 'assistant':
                history_html += f"""
                <div style='text-align: left; margin: 10px 0;'>
                    <span style='background-color: #aedfeb; padding: 10px; border-radius: 10px; display: inline-block; max-width: 80%;'>
                        {message['content']}
                    </span>
                </div>
                """
        return ui.HTML(history_html)

# Shiny App-Objekt
app = App(app_ui, server)
